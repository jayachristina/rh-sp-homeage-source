[{
  "id" : "pattern-001",
  "displayOrder": 1,
  "title": "Modernize your stack by adopting Change Data Capture",
  "description": "This solution pattern brings an architectural solution for scenarios where services integration must happen through data integration and cause no impact to the existing stack. This supports the extension of existing capabilities with no changes to legacy apps where new features can be delivered by cloud-native microservices ",
  "readmore": "https://redhat-solution-patterns.github.io/solution-pattern-modernization-cdc",
  "tags": [ "Debezium", "Change Data Capture ", "Red Hat Application Foundations", "AMQ Streams", "Kafka"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : [],
  "image" : ""
},
{
  "id" : "pattern-002",
  "displayOrder": 2,
  "title": "Enhancing Applications with Application Services",
  "description": "Most enterprises undertake app modernization of existing monolithic applications to microservices to enable cloud adoption and agility. This solution pattern takes a look at enhancing these Applications with Application Services, thereby realizing greater business value.",
  "readmore": "redhat-solution-patterns.github.io/solution-pattern-enhancing-applications",
  "tags": ["API Management", "Streaming", "Red Hat Application Foundations", "Apache Kafka"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : []
}
,
{
  "id" : "pattern-002",
  "displayOrder": 2,
  "title": "Sentiment Analysis with Kafka + AIML throught Knative Event Driven Architecture",
  "description": "This solution pattern showcases an architecture which is scalable and efficient system capturing and responding to streaming data using Kafka as the streaming platform and AIML. With Event-Driven Architecture this system can connect to, and consume from a number of systems, services and data sources by responding to triggering events.",
  "readmore": "https://redhat-solution-patterns.github.io/solution-pattern-sentiment-analysis",
  "tags": ["Kafka", "OpenShift Serverless", "Event Driven Architecture", "Quarkus", "Knative"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : []
},
{
  "id" : "pattern-002",
  "displayOrder": 2,
  "title": "Comprehensive Service Architecture with API Management and Service Mesh",
  "description": "API-centric and microservices-based IT architectures improve speed, agility, and efficiency. Consistent and effective management of these interfaces and services is critical for successful deployment and use. This solution pattern helps you understand how to use API management and service mesh  together to setup a comprehensive service management architecture.",
  "readmore": "https://redhat-solution-patterns.github.io/solution-pattern-apim-servicemesh",
  "tags": ["Istio", "Service Mesh", "API Management", "3scale"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : []
},
{
  "id" : "pattern-002",
  "displayOrder": 2,
  "title": "MultiCloud GitOps with ODF",
  "description": "This solution pattern brings an architectural solution for scenarios where code(GitOps) can be used for managing different Openshift clusters running across multiple clouds and deploying Red Hat ODF(software defined storage) on these clusters. RedHat ODF can be configured differently for each cluster as per the requirements through code. The architecture demonstrates how ArgoCD with Red Hat ACM can manage different clusters and applications deployed on those clusters.",
  "readmore": "https://redhat-solution-patterns.github.io/solution-pattern-multicloud-gitops-odf",
  "tags": ["Gitops", "OpenShift", "OpenShift Data Foundations"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : []
},
{
  "id" : "pattern-002",
  "displayOrder": 2,
  "title": "Accelerate time to value with Red Hat Openshift Service on AWS",
  "description": "This solution pattern brings an architectural solution demonstrating the integration of Red Hat Openshift Service on AWS(ROSA) with different AWS services.",
  "readmore": "https://redhat-solution-patterns.github.io/solution-pattern-modernize-with-rosa",
  "tags": ["OpenShift", "AWS"],
  "supportability": "community",
  "industry": "retail",
  "patternType": "solution-pattern",
  "additionalLinks" : []
}
]
